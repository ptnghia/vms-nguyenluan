version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vms-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vms
      POSTGRES_USER: vms_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vms_secure_pass_change_me}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vms_user -d vms"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vms-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vms-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vms-network

  # API Server (Node.js)
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: vms-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DATABASE_URL: postgresql://vms_user:${POSTGRES_PASSWORD:-vms_secure_pass_change_me}@postgres:5432/vms
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-change_this_secret_in_production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:8080}
    volumes:
      - ./services/api:/app
      - /app/node_modules
      - recordings:/data/recordings:ro
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vms-network

  # Recording Engine (C++ with FFmpeg)
  recorder:
    build:
      context: ./services/recorder
      dockerfile: Dockerfile
    container_name: vms-recorder
    restart: unless-stopped
    privileged: true  # Required for /dev/dri access
    devices:
      - /dev/dri:/dev/dri  # Intel QuickSync
    environment:
      DATABASE_URL: postgresql://vms_user:${POSTGRES_PASSWORD:-vms_secure_pass_change_me}@postgres:5432/vms
      REDIS_URL: redis://redis:6379
      RECORDING_PATH: /data/recordings
      LOG_LEVEL: ${LOG_LEVEL:-info}
      TRANSCODE_PRESET: ${TRANSCODE_PRESET:-balanced}
      # QuickSync settings
      QSV_DEVICE: /dev/dri/renderD128
      QSV_LOW_QUALITY: "720p"
      QSV_HIGH_QUALITY: "1440p"
    volumes:
      - ./services/recorder:/app
      - recordings:/data/recordings
      - logs:/var/log/vms
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vms-network

  # Frontend (React + Nginx)
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: vms-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3000}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://localhost:3000}
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
    ports:
      - "8080:80"
      - "3001:3001"  # Hot reload for development
    depends_on:
      - api
    networks:
      - vms-network

  # RTSP Restreamer (optional - for testing without real cameras)
  rtsp-simulator:
    image: bluenviron/mediamtx:latest
    container_name: vms-rtsp-simulator
    restart: unless-stopped
    profiles:
      - testing
    volumes:
      - ./testing/mediamtx.yml:/mediamtx.yml
      - ./testing/videos:/videos
    ports:
      - "8554:8554"  # RTSP
      - "1935:1935"  # RTMP
      - "8888:8888"  # HLS
      - "8889:8889"  # WebRTC
    networks:
      - vms-network

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  recordings:
    driver: local
    driver_opts:
      type: none
      device: /home/camera/app/vms/data/recordings
      o: bind
  logs:
    driver: local

networks:
  vms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
